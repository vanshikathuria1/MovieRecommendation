# -*- coding: utf-8 -*-
"""Movie Recommendation YBI

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYq5D5KsHTcbWc6F-QobcfuZAK29II8B

***Movie Recommendation System***

**Objective**: To develop a movie recommendation system utilizing machine learning techniques to provide personalized and engaging movie suggestions based on user preferences.

**Data Source**: Github

Import **Libraries**
"""

import pandas as pd

import numpy as np

"""Import **Data**"""

df= pd.read_csv(r'https://raw.githubusercontent.com/YBI-Foundation/Dataset/main/Movies%20Recommendation.csv')

"""Describe **Data**"""

df.head()

"""**Data Visualization**"""

df.info()

df.shape

"""**Data Preprocessing**"""

df.columns

"""**Defining Target Variables and Feature Variables**

*Feature Selection*
"""

df_features= df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

"""**Train Test Split**"""

x=df_features['Movie_Genre']+''+df_features['Movie_Keywords']+''+df_features['Movie_Tagline']+''+df_features['Movie_Cast']+''+df_features['Movie_Director']

x.shape

"""**Modeling**

*Feature Text Conversion to tokens*
"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf= TfidfVectorizer()

x=tfidf.fit_transform(x)

x.shape

print(x)

"""**Model Evaluation**

*Similarity Score using Cosine Similarity*
"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score= cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

"""**Get Movie name as input from user and validate for closest spelling**"""

Favourite_Movie_Name= input('Enter your favourite name:')

All_Movies_Title_List=df['Movie_Title'].tolist()

import difflib

Movie_Recommendation= difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)
print(Movie_Recommendation)

Close_Match= Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie= df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

Recommendation_Score=list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))
print(Recommendation_Score)

len(Recommendation_Score)

"""**Get all movies sort based on recommendation score wrt favourite movie**"""

Sorted_Similar_Movies= sorted(Recommendation_Score,key=lambda x:x[1],reverse=True)
print(Sorted_Similar_Movies)

"""**Prediction**"""

print('Top 30 Movies suggested exclusively for you: \n')
i=1

for movie in Sorted_Similar_Movies:
  index= movie[0]
  title_from_index= df[df.index==index]['Movie_Title'].values[0]
  if(i<31):
    print(i,'.',title_from_index)
    i+=1

"""**Top 10 Movie Recommendation System**"""

Movie_Name=input('Enter your favourite movie and let us recommend the Top 10 movies you would love!')
list_of_all_titles= df['Movie_Title'].tolist()
Find_Close_Match= difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match= Find_Close_Match[0]
Index_of_Movie= df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
Recommendation_Score= list(enumerate(Similarity_Score[Index_of_Movie]))
sorted_similar_movies= sorted(Recommendation_Score,key=lambda x:x[1], reverse= True)
print('Top 10 movies suggested for you: \n')
i=1
for movie in sorted_similar_movies:
  index= movie[0]
  title_from_index= df[df.index==index]['Movie_Title'].values
  if(i<11):
    print(i,'.',title_from_index)
    i+=1

"""***Explanation***
*The recommendation system has succesfully predicted and filtered preferences according to the user's choices. It tells us what movies/items are most similar to the user's movie choice using Python and Pandas*


"""